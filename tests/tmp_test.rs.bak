#[test]
fn tmp_lf_map() {
    let text = "foo\0far\0baz\0".as_bytes().to_vec();
    let text_size = text.len();
    let converter = IdConverter::new::<u8>();
    let suffix_array = testutil::build_suffix_array(&text);
    let inv_suffix_array = testutil::build_inv_suffix_array(&suffix_array);
    let fm_index =
        MultiTextFMIndexBackend::new(text.clone(), converter, |sa| sample::sample(sa, 0));

    for (i, &k) in suffix_array.iter().enumerate() {
        let suffix = &text[k as usize..]
            .iter()
            .map(|&c| if c == 0 { '$' } else { c as char })
            .collect::<String>();
        if k == 0 {
            println!("{:2} {:2} {}", i, k, suffix);
        } else {
            let w = text_size - 1;
            let j = modular_sub(k as usize, 1, text_size);
            println!(
                "{:2} {:2} {:w$}{}",
                i,
                k,
                suffix,
                if text[j] == 0 { '$' } else { text[j] as char }
            );
        }
    }

    let mut lf_map_expected = vec![0; text_size];
    let mut lf_map_actual = vec![0; text_size];
    for i in 0..text_size {
        let k = modular_sub(suffix_array[i] as usize, 1, text_size);
        lf_map_expected[i] = inv_suffix_array[k];
        lf_map_actual[i] = fm_index.lf_map(i as u64);
    }

    assert_eq!(lf_map_expected, lf_map_actual);
}
